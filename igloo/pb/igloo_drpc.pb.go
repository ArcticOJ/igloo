// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.32
// source: igloo.proto

package pb

import (
	context "context"
	errors "errors"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_igloo_proto struct{}

func (drpcEncoding_File_igloo_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_igloo_proto) MarshalAppend(buf []byte, msg drpc.Message) ([]byte, error) {
	return proto.MarshalOptions{}.MarshalAppend(buf, msg.(proto.Message))
}

func (drpcEncoding_File_igloo_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_igloo_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return protojson.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_igloo_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return protojson.Unmarshal(buf, msg.(proto.Message))
}

type DRPCIglooClient interface {
	DRPCConn() drpc.Conn

	Alive(ctx context.Context, in *emptypb.Empty) (*wrapperspb.BoolValue, error)
	Specification(ctx context.Context, in *emptypb.Empty) (*InstanceSpecification, error)
	Judge(ctx context.Context, in *File) (DRPCIgloo_JudgeClient, error)
}

type drpcIglooClient struct {
	cc drpc.Conn
}

func NewDRPCIglooClient(cc drpc.Conn) DRPCIglooClient {
	return &drpcIglooClient{cc}
}

func (c *drpcIglooClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcIglooClient) Alive(ctx context.Context, in *emptypb.Empty) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/arctic.Igloo/Alive", drpcEncoding_File_igloo_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcIglooClient) Specification(ctx context.Context, in *emptypb.Empty) (*InstanceSpecification, error) {
	out := new(InstanceSpecification)
	err := c.cc.Invoke(ctx, "/arctic.Igloo/Specification", drpcEncoding_File_igloo_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcIglooClient) Judge(ctx context.Context, in *File) (DRPCIgloo_JudgeClient, error) {
	stream, err := c.cc.NewStream(ctx, "/arctic.Igloo/Judge", drpcEncoding_File_igloo_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcIgloo_JudgeClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_igloo_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCIgloo_JudgeClient interface {
	drpc.Stream
	Recv() (*JudgeResult, error)
}

type drpcIgloo_JudgeClient struct {
	drpc.Stream
}

func (x *drpcIgloo_JudgeClient) Recv() (*JudgeResult, error) {
	m := new(JudgeResult)
	if err := x.MsgRecv(m, drpcEncoding_File_igloo_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcIgloo_JudgeClient) RecvMsg(m *JudgeResult) error {
	return x.MsgRecv(m, drpcEncoding_File_igloo_proto{})
}

type DRPCIglooServer interface {
	Alive(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error)
	Specification(context.Context, *emptypb.Empty) (*InstanceSpecification, error)
	Judge(*File, DRPCIgloo_JudgeStream) error
}

type DRPCIglooUnimplementedServer struct{}

func (s *DRPCIglooUnimplementedServer) Alive(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCIglooUnimplementedServer) Specification(context.Context, *emptypb.Empty) (*InstanceSpecification, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCIglooUnimplementedServer) Judge(*File, DRPCIgloo_JudgeStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCIglooDescription struct{}

func (DRPCIglooDescription) NumMethods() int { return 3 }

func (DRPCIglooDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/arctic.Igloo/Alive", drpcEncoding_File_igloo_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCIglooServer).
					Alive(
						ctx,
						in1.(*emptypb.Empty),
					)
			}, DRPCIglooServer.Alive, true
	case 1:
		return "/arctic.Igloo/Specification", drpcEncoding_File_igloo_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCIglooServer).
					Specification(
						ctx,
						in1.(*emptypb.Empty),
					)
			}, DRPCIglooServer.Specification, true
	case 2:
		return "/arctic.Igloo/Judge", drpcEncoding_File_igloo_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCIglooServer).
					Judge(
						in1.(*File),
						&drpcIgloo_JudgeStream{in2.(drpc.Stream)},
					)
			}, DRPCIglooServer.Judge, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterIgloo(mux drpc.Mux, impl DRPCIglooServer) error {
	return mux.Register(impl, DRPCIglooDescription{})
}

type DRPCIgloo_AliveStream interface {
	drpc.Stream
	SendAndClose(*wrapperspb.BoolValue) error
}

type drpcIgloo_AliveStream struct {
	drpc.Stream
}

func (x *drpcIgloo_AliveStream) SendAndClose(m *wrapperspb.BoolValue) error {
	if err := x.MsgSend(m, drpcEncoding_File_igloo_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCIgloo_SpecificationStream interface {
	drpc.Stream
	SendAndClose(*InstanceSpecification) error
}

type drpcIgloo_SpecificationStream struct {
	drpc.Stream
}

func (x *drpcIgloo_SpecificationStream) SendAndClose(m *InstanceSpecification) error {
	if err := x.MsgSend(m, drpcEncoding_File_igloo_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCIgloo_JudgeStream interface {
	drpc.Stream
	Send(*JudgeResult) error
}

type drpcIgloo_JudgeStream struct {
	drpc.Stream
}

func (x *drpcIgloo_JudgeStream) Send(m *JudgeResult) error {
	return x.MsgSend(m, drpcEncoding_File_igloo_proto{})
}
